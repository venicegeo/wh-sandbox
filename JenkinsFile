#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def golangTool = tool 'golang_1.7'
    def nodejs = tool 'NodeJS_6'

    def appName = "conda-channel"
    def appvers = ""
    stage("Setup") {
        deleteDir()
        sh "mkdir -p  ${root}/gopath/src/wh-sandbox"
        dir("${root}/gopath/src/wh-sandbox") {
            git url: "https://github.com/venicegeo/wh-sandbox", branch: "master"
            appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true).trim()
        }
    }

    stage("Build Server") {
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              cd ${root}/gopath/src/wh-sandbox
              go build
            """
        }
    }
    
    stage("Cleanup") {
        sh """
          mv ${root}/gopath/src/wh-sandbox/wh-sandbox .
          mv ${root}/gopath/src/wh-sandbox/channel .
          mv ${root}/gopath/src/wh-sandbox/manifest.jenkins.yml .
          rm -rf ${root}/gopath
          ls
        """
        
    }
    
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start -u none
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf restage ${appName}
                """

                //try {
                  sh "cf start ${appName}"
                //} catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  //sh "cf delete ${appName} -f"
                  //error("Error during application start. Deleting ${appName} and failing the build.")
                //}
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"conda-channel \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname conda-channel"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
}
